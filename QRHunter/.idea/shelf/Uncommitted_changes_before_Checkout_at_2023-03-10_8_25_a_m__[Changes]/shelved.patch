Index: app/src/main/java/com/example/qrhunter/data/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.qrhunter.data.repository;\r\n\r\nimport com.example.qrhunter.data.model.Player;\r\n\r\npublic class UserRepository extends DataRepository {\r\n    /**\r\n     * Checks whether a player already exists in Firestore\r\n     *\r\n     * @param id The id of a player to check against. This should be a device id\r\n     * @return True if player exist, and false otherwise\r\n     */\r\n    public boolean doesPlayerExist(String id) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks whether a username already exists in Firestore\r\n     *\r\n     * @param username The username to be checked against\r\n     * @return True if username already exists, false otherwise\r\n     */\r\n    public boolean doesUsernameExist(String username) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Create a player document in Firestore\r\n     *\r\n     * @param player The player to be added to Firestore\r\n     */\r\n    public void initializePlayer(Player player) {\r\n        // Check whether the user already exist\r\n        if (!doesPlayerExist(player.getId())) {\r\n            return;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/qrhunter/data/repository/UserRepository.java b/app/src/main/java/com/example/qrhunter/data/repository/UserRepository.java
--- a/app/src/main/java/com/example/qrhunter/data/repository/UserRepository.java	
+++ b/app/src/main/java/com/example/qrhunter/data/repository/UserRepository.java	
@@ -1,6 +1,19 @@
 package com.example.qrhunter.data.repository;
 
+import static android.content.ContentValues.TAG;
+
+import android.util.Log;
+
+import androidx.annotation.NonNull;
+
 import com.example.qrhunter.data.model.Player;
+import com.google.android.gms.tasks.OnCompleteListener;
+import com.google.android.gms.tasks.Task;
+import com.google.firebase.firestore.QueryDocumentSnapshot;
+import com.google.firebase.firestore.QuerySnapshot;
+
+import java.util.ArrayList;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 public class UserRepository extends DataRepository {
     /**
@@ -10,7 +23,19 @@
      * @return True if player exist, and false otherwise
      */
     public boolean doesPlayerExist(String id) {
-        return false;
+        AtomicBoolean playerExists = new AtomicBoolean(false);
+        db.collection("users").document(id).get().addOnSuccessListener(documentSnapshot -> {
+            if (documentSnapshot.exists()) {
+                playerExists.set(true);
+                Log.d("TRUE--------------------------", "doesPlayerExist: ");
+            }
+            else {
+                playerExists.set(false);
+                Log.d("FALSE--------------------------", "doesPlayerExist: ");
+            }
+        });
+
+        return playerExists.get();
     }
 
     /**
@@ -20,7 +45,36 @@
      * @return True if username already exists, false otherwise
      */
     public boolean doesUsernameExist(String username) {
-        return false;
+        AtomicBoolean usernameExists = new AtomicBoolean(false);
+        ArrayList<String> deviceIds = new ArrayList<>();
+        db.collection("users")
+                .get()
+                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
+                    @Override
+                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
+                        if (task.isSuccessful()) {
+                            for (QueryDocumentSnapshot document : task.getResult()) {
+                                deviceIds.add(document.getId());
+                                Log.d(TAG, document.getId() + " => " + document.getData());
+                            }
+                        } else {
+                            Log.d(TAG, "Error getting documents: ", task.getException());
+                        }
+                    }
+                });
+        for (String deviceId : deviceIds) {
+            db.collection("users").document(deviceId).get().addOnSuccessListener(documentSnapshot -> {
+                if (documentSnapshot.exists()) {
+                    if (documentSnapshot.getString("username").equals(username)) {
+                        usernameExists.set(true);
+                    }
+                    else {
+                        usernameExists.set(false);
+                    }
+                }
+            });
+        }
+        return usernameExists.get();
     }
 
     /**
Index: app/src/main/java/com/example/qrhunter/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.qrhunter;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.fragment.NavHostFragment;\r\nimport androidx.navigation.ui.NavigationUI;\r\n\r\nimport com.example.qrhunter.databinding.ActivityMainBinding;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    private ActivityMainBinding binding;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n\r\n        FirebaseFirestore db;\r\n        // Get a reference to the database\r\n        db = FirebaseFirestore.getInstance();\r\n\r\n        NavHostFragment navHostFragment =\r\n                (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.nav_host_fragment);\r\n        NavController navController = navHostFragment.getNavController();\r\n        NavigationUI.setupWithNavController(binding.bottomNav, navController);\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/qrhunter/MainActivity.java b/app/src/main/java/com/example/qrhunter/MainActivity.java
--- a/app/src/main/java/com/example/qrhunter/MainActivity.java	
+++ b/app/src/main/java/com/example/qrhunter/MainActivity.java	
@@ -1,34 +1,67 @@
 package com.example.qrhunter;
 
+import android.annotation.SuppressLint;
+import android.content.Intent;
 import android.os.Bundle;
+import android.provider.Settings;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ImageButton;
+import android.widget.ImageView;
 
 import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
 import androidx.navigation.NavController;
 import androidx.navigation.fragment.NavHostFragment;
 import androidx.navigation.ui.NavigationUI;
 
+import com.example.qrhunter.data.model.Player;
+import com.example.qrhunter.data.repository.QRCodeRepository;
+import com.example.qrhunter.data.repository.UserRepository;
 import com.example.qrhunter.databinding.ActivityMainBinding;
+import com.example.qrhunter.ui.profile.ProfileFragment;
 import com.google.firebase.firestore.FirebaseFirestore;
 
-public class MainActivity extends AppCompatActivity {
+public class MainActivity extends AppCompatActivity{
 
     private ActivityMainBinding binding;
+    private String deviceId;
+
+
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
+
         super.onCreate(savedInstanceState);
 
         binding = ActivityMainBinding.inflate(getLayoutInflater());
         setContentView(binding.getRoot());
-
+        deviceId = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);
         FirebaseFirestore db;
         // Get a reference to the database
-        db = FirebaseFirestore.getInstance();
-
         NavHostFragment navHostFragment =
                 (NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.nav_host_fragment);
         NavController navController = navHostFragment.getNavController();
         NavigationUI.setupWithNavController(binding.bottomNav, navController);
+    }
 
+    @Override
+    protected void onStart() {
+        super.onStart();
+        deviceId = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);
+        UserRepository userRepository = new UserRepository();
+        if (!userRepository.doesPlayerExist(deviceId)){
+            binding.bottomNav.setVisibility(View.GONE);
+        }
+        else{
+            binding.bottomNav.setVisibility(View.VISIBLE);
+            Intent intent = new Intent(this, ProfileFragment.class);
+            startActivity(intent);
+            finish();
+        }
     }
 }
\ No newline at end of file
Index: ../.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.idea/shelf\r\nQRHunter/local.properties\r\n
===================================================================
diff --git a/../.gitignore b/../.gitignore
--- a/../.gitignore	
+++ b/../.gitignore	
@@ -1,2 +1,2 @@
-.idea/shelf
+
 QRHunter/local.properties
Index: app/src/main/java/com/example/qrhunter/data/model/QRCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.qrhunter.data.model;\r\n\r\nimport com.example.qrhunter.utils.QRCodeUtil;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Model class for a QRCode\r\n * TODO: Update the attributes as needed\r\n */\r\npublic class QRCode {\r\n    /**\r\n     * The hash calculated from the QR Code/Bar contents\r\n     */\r\n    private String hash;\r\n\r\n    /**\r\n     * The name generated from the hash\r\n     */\r\n    private String name;\r\n\r\n    /**\r\n     * The visual representation generated from the hash\r\n     */\r\n    private String visualRepresentation;\r\n\r\n    /**\r\n     * The score of the QR Code calculated from the hash\r\n     */\r\n    private double score;\r\n    private Location location;\r\n    private ArrayList<Comment> comments;\r\n\r\n    /**\r\n     * Constructor for a new QR Code\r\n     */\r\n    public QRCode(String hash, Location location, ArrayList<Comment> comments) {\r\n        this.hash = hash;\r\n\r\n        this.name = QRCodeUtil.generateName(hash);\r\n        this.visualRepresentation = QRCodeUtil.generateVisualRepresentation(hash);\r\n        this.score = QRCodeUtil.generateScore(hash);\r\n\r\n        this.location = location;\r\n        this.comments = comments;\r\n    }\r\n\r\n    /**\r\n     * Constructor for an existing QR Code in Firestore\r\n     */\r\n    public QRCode(String hash, Location location, String name, double score, String visualRepresentation, ArrayList<Comment> comments) {\r\n        this.hash = hash;\r\n\r\n        this.name = name;\r\n        this.visualRepresentation = visualRepresentation;\r\n        this.score = score;\r\n\r\n        this.location = location;\r\n        this.comments = comments;\r\n    }\r\n}\r\n\r\n
===================================================================
diff --git a/app/src/main/java/com/example/qrhunter/data/model/QRCode.java b/app/src/main/java/com/example/qrhunter/data/model/QRCode.java
--- a/app/src/main/java/com/example/qrhunter/data/model/QRCode.java	
+++ b/app/src/main/java/com/example/qrhunter/data/model/QRCode.java	
@@ -27,7 +27,7 @@
     /**
      * The score of the QR Code calculated from the hash
      */
-    private double score;
+    private int score;
     private Location location;
     private ArrayList<Comment> comments;
 
@@ -48,7 +48,7 @@
     /**
      * Constructor for an existing QR Code in Firestore
      */
-    public QRCode(String hash, Location location, String name, double score, String visualRepresentation, ArrayList<Comment> comments) {
+    public QRCode(String hash, Location location, String name, int score, String visualRepresentation, ArrayList<Comment> comments) {
         this.hash = hash;
 
         this.name = name;
Index: app/src/main/java/com/example/qrhunter/utils/QRCodeUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.qrhunter.utils;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\n\r\n/**\r\n * A class containing all the helper functions for QRCode.\r\n * You shouldn't have to initialize a QRCodeUtil object.\r\n * TODO: Update the methods with actual logic\r\n */\r\npublic final class QRCodeUtil {\r\n\r\n    /**\r\n     * Generates a hash given the content of a QR Code/Bar using SHA-256 Hash.\r\n     *\r\n     * @param qrCodeContent The content of the QR Code\r\n     * @return A String Hash\r\n     */\r\n    public static String generateHash(String qrCodeContent) {\r\n        return DigestUtils.sha256Hex(qrCodeContent);\r\n    }\r\n\r\n    /**\r\n     * Generate a human readable name for a QR code given the hash\r\n     *\r\n     * @param hash The hash of the QR Code\r\n     * @return A human readable name\r\n     */\r\n    public static String generateName(String hash) {\r\n        return \"name\";\r\n    }\r\n\r\n    /**\r\n     * Generates the score of a QR Code given the hash\r\n     *\r\n     * @param hash The hash of the QR Code\r\n     * @return A score\r\n     */\r\n    public static double generateScore(String hash) {\r\n        int score = 0;\r\n        char[] array = hash.toCharArray();\r\n        for (int i = 0; i < array.length-1; i++) {\r\n            int value = 0;\r\n            if (array[i] == '0' && array[i+1] != '0') {\r\n                score += 1;\r\n            }\r\n            else if (array[i] == array [i+1] ) {\r\n                int j = i + 1;\r\n                while (array[i] == array[j]) {\r\n                    value += 1;\r\n                    j += 1;\r\n                    if (j == array.length) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (value > 0) {\r\n                score += generatePoints(array[i], value);\r\n                i += value;\r\n            }\r\n        }\r\n        return score;\r\n    }\r\n\r\n    /**\r\n     * Generates the score of a string of characters within a hash\r\n     *\r\n     * @param key The character to be converted\r\n     * @param value The exponent to multiply the points by\r\n     * @return A score\r\n     */\r\n    public static double generatePoints(Character key, Integer value) {\r\n        double points;\r\n        int ascii = (int) key;\r\n        if (ascii < 58) {\r\n            ascii -= 48;\r\n        }\r\n        else {\r\n            ascii -= 87;\r\n        }\r\n        points = Math.pow(ascii, value);\r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * Generate a visual representation of a QR Code given the hash\r\n     *\r\n     * @param hash The hash of the QR Code\r\n     * @return A visual representation\r\n     */\r\n    public static String generateVisualRepresentation(String hash) {\r\n        return \"Visuals\";\r\n    }\r\n}\r\n
===================================================================
diff --git a/app/src/main/java/com/example/qrhunter/utils/QRCodeUtil.java b/app/src/main/java/com/example/qrhunter/utils/QRCodeUtil.java
--- a/app/src/main/java/com/example/qrhunter/utils/QRCodeUtil.java	
+++ b/app/src/main/java/com/example/qrhunter/utils/QRCodeUtil.java	
@@ -1,7 +1,5 @@
 package com.example.qrhunter.utils;
 
-import org.apache.commons.codec.digest.DigestUtils;
-
 /**
  * A class containing all the helper functions for QRCode.
  * You shouldn't have to initialize a QRCodeUtil object.
@@ -16,7 +14,7 @@
      * @return A String Hash
      */
     public static String generateHash(String qrCodeContent) {
-        return DigestUtils.sha256Hex(qrCodeContent);
+        return "123";
     }
 
     /**
@@ -35,50 +33,8 @@
      * @param hash The hash of the QR Code
      * @return A score
      */
-    public static double generateScore(String hash) {
-        int score = 0;
-        char[] array = hash.toCharArray();
-        for (int i = 0; i < array.length-1; i++) {
-            int value = 0;
-            if (array[i] == '0' && array[i+1] != '0') {
-                score += 1;
-            }
-            else if (array[i] == array [i+1] ) {
-                int j = i + 1;
-                while (array[i] == array[j]) {
-                    value += 1;
-                    j += 1;
-                    if (j == array.length) {
-                        break;
-                    }
-                }
-            }
-            if (value > 0) {
-                score += generatePoints(array[i], value);
-                i += value;
-            }
-        }
-        return score;
-    }
-
-    /**
-     * Generates the score of a string of characters within a hash
-     *
-     * @param key The character to be converted
-     * @param value The exponent to multiply the points by
-     * @return A score
-     */
-    public static double generatePoints(Character key, Integer value) {
-        double points;
-        int ascii = (int) key;
-        if (ascii < 58) {
-            ascii -= 48;
-        }
-        else {
-            ascii -= 87;
-        }
-        points = Math.pow(ascii, value);
-        return points;
+    public static int generateScore(String hash) {
+        return 123;
     }
 
     /**
